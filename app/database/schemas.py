from pydantic import BaseModel, Field, ConfigDict, EmailStr
from datetime import date, datetime

class UserSchema(BaseModel):
    email: str = Field(min_length=5, max_length=320, description="users email address, unique and required")
    user_name: str = Field(min_length=1, max_length=50, description="users username, unique optional, autogenerated")
    book_goal: int = Field(ge=1, le=5000, description="users books goals / year, optional")

class UserWithIDSchema(UserSchema):
    id: int = Field(description="users ID in database")


class PasswordSchema(UserSchema):
    password: str = Field(min_length=5, max_length=100, description="users password, requred")


class TokenSchema(BaseModel):
    access_token: str
    token_type: str


class TokenDataSchema(BaseModel):
    username: str | None = None


class CategorySchema(BaseModel):
    name: str = Field(description="name of a book category, unique and required")
    color_code: str = Field(description="a color code of each and every main category, required")


class BookSchema(BaseModel):
    title: str = Field(description="title of book, required")
    page_count: int = Field(min_length=1, description="amount of pages in a book")
    is_ebook: bool = Field(description="")
    publisher: str = Field(description="")
    description: str = Field(description="")
    language: str = Field(description="") 
    main_category_id: int = Field(description="the id linking to the category table, describes the main category of the book, required")
    book_cover_id: int = Field(description="")


class YearlyPageCountSchema(BaseModel):
    january: int = Field(description="")
    february: int = Field(description="")
    march: int = Field(description="")
    april: int = Field(description="")
    may: int = Field(description="")
    june: int = Field(description="")
    july: int = Field(description="")
    august: int = Field(description="")
    september: int = Field(description="")
    october: int = Field(description="")
    november: int = Field(description="")
    december: int = Field(description="")
    user_id: int = Field(description="")


class BookCoverSchema(BaseModel):
    url: str = Field(description="")


class AuthorBookSchema(BaseModel):
    author_id: int = Field(description="")
    book_id: int = Field(description="")


class AuthorSchema(BaseModel):
    name: str = Field(description="")

class SubCategorySchema(BaseModel):
    category_id: int = Field(description="the id linking to the category table, describes the subcategory of a book, unique including book id + required")
    book_id: int = Field(description="the id linking to the book table, describes the book related to the subcategory, unique including category id + required")


class BookShelfSchema(BaseModel):
    pages_read: int = Field(min_length=0, default=0, description="describes how many pages a user has read of a book, required")
    start_date: date = Field(description="describes when a user started reading a book")
    finished_date: date = Field(description="describes when a user finished reading a book")
    user_id: int = Field(description="the id linking to the user table, describes the reader of a book, unique including book id + required")
    book_id: int = Field(description="the id linking to the book table, describes the book being read, unique including user id + required")
    isFinished: bool = Field(description="Shows if a book has been finished, regardles of end date, Required, default False")


class AchievementSchema(BaseModel):
    name: str = Field(description="name of a achievement that e user can achive, required and unique")


class CompletedAchievementSchema(BaseModel):
    achievement_id: int = Field(description="linking to the achievements table, describes the achievement a user has completed, unique including user id + required")
    user_id: int = Field(description="linking to the user table describes a user that has completed an achiviement, required, unique including achiviements id + required")